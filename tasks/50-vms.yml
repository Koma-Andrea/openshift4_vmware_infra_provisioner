# ansible-configured
---
- name: Install Ansible's vmware_guest required libraryes
  delegate_to: localhost
  become: yes
  yum:
    name: 
      - python3-requests
      - python3-pip
    state: present

- name: Install python non rpm packages
  become: yes
  delegate_to: localhost
  pip:
    name: 
      - PyVmomi

- name: Create Directory in Datastore to host iPXE
  when: 
    - ocp_installer.install_method != 'template'
    - ocp_vm_create_ipxe
  vsphere_file:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    datacenter: "{{ vcenter.datacenter }}"
    datastore:  "{{ vcenter.datastore }}"      
    path: "{{ ocp_installer.clustername }}"
    state: directory
  delegate_to: localhost
  ignore_errors: yes

- name: "Query a ipxe iso file on a datastore {{ ocp_installer.clustername }}/{{ ocp_installer.iso_datastore_name| default('ipxe_okd_ocp.iso') }}"
  when: 
    - ocp_installer.install_method != 'template'
    - ocp_vm_create_ipxe
  vsphere_file:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    datacenter: "{{ vcenter.datacenter }}"
    datastore:  "{{ vcenter.datastore }}"      
    path: "{{ ocp_installer.clustername }}/{{ ocp_installer.iso_datastore_name| default('ipxe_okd_ocp.iso') }}"
    state: file
  delegate_to: localhost
  ignore_errors: yes
  register: ipxe_inuse

- name: Copy ISO to datastore
  when: 
    - ipxe_inuse.state|default('present') == 'absent'
    - ocp_vm_create_ipxe
    - ocp_installer.install_method != 'template'
  vsphere_copy:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    datacenter: "{{ vcenter.datacenter }}"
    datastore:  "{{ vcenter.datastore }}"
    src: "{{playbook_dir}}/tmp/iso/coreos_ipxe.iso"
    path: "{{ ocp_installer.clustername }}/{{ ocp_installer.iso_datastore_name| default('ipxe_okd_ocp.iso') }}"
  delegate_to: localhost

- name: "Create a VM folder ({{ vcenter.folder }}) on datacenter {{ vcenter.datacenter }}"
  vcenter_folder:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    datacenter: "{{ vcenter.datacenter }}"
    folder_name: "{{ vcenter.folder }}"
    folder_type: vm
    state: present
  register: vm_folder_creation_result
  delegate_to: localhost

- name: "Create a Datastore folder ({{ ocp_installer.clustername }}) on datacenter {{ vcenter.datacenter }}"
  vcenter_folder:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    datacenter: "{{ vcenter.datacenter }}"
    folder_name: "{{ ocp_installer.clustername }}"
    folder_type: datastore
    state: present
  register: vm_folder_creation_result
  delegate_to: localhost

- set_fact:
    ign_bootstrap: "{{ lookup('file', playbook_dir + '/tmp/cluster_conf/bootstrap.ign') | string | b64encode }}"
    ign_master: "{{ lookup('file', playbook_dir + '/tmp/cluster_conf/master.ign') | string | b64encode }}"
    ign_worker: "{{ lookup('file', playbook_dir + '/tmp/cluster_conf/worker.ign') | string | b64encode }}"

- set_fact:
    ign: "{{ ign | combine( { item.type: item.ign } ) }}"
  with_items:
    - type: master
      ign: "{{ign_master}}"
    - type: bootstrap
      ign: "{{ign_bootstrap}}"
    - type: worker
      ign: "{{ign_worker}}"

- name: Create a virtual machine from a template
  tags: vm
  loop: "{{ vm_hosts }}"
  vmware_guest:
    annotation: "{{ item.annotation | default('Openshift node ' + item.type) }}"
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    folder: "{{ vcenter.folder }}"
    name: "{{ item.vmname | default(item.hostname) }}"
    state: present
    datacenter: "{{ vcenter.datacenter }}"
    template: "{{ omit if ocp_installer.install_method == 'netinstall' else ocp_installer.template }}"
    guest_id: "{{ item.guest_id | default(hosts_defaults[item.type]['guest_id']) }}"
    disk:
      - size_gb: "{{ item.disk | default(hosts_defaults[item.type]['disk']) }}"
        type: "{{ item.disktype | default(hosts_defaults[item.type]['disktype'])| default('thin') }}"
        datastore:  "{{ vcenter.datastore }}"

    hardware:
      nested_virt: "{{ item.nested_virt | default(hosts_defaults[item.type]['nested_virt']) }}"
      memory_mb: "{{ item.memory_mb | default(hosts_defaults[item.type]['memory_mb']) }}"
      num_cpus: "{{ item.num_cpus | default(hosts_defaults[item.type]['num_cpus']) }}"
      num_cpu_cores_per_socket: "{{ item.num_cpu_cores_per_socket | default(hosts_defaults[item.type]['num_cpu_cores_per_socket']) }}"
      mem_reservation: "{{ '0' if not enable_reservation else (item.memory_mb | default(hosts_defaults[item.type]['memory_mb'])) }}"
      memory_reservation_lock: "{{ 'True' if enable_reservation else 'False' }}"
      cpu_reservation: "{{ '0' if not enable_reservation else (vcenter.cpu_biggest * ( item.num_cpus | default(hosts_defaults[item.type]['num_cpus'])) * ( item.num_cpu_cores_per_socket | default(hosts_defaults[item.type]['num_cpu_cores_per_socket']))) }}"

    cdrom:
      type:     "{{ 'none' if ocp_installer.install_method == 'template' else 'iso' }}"
      iso_path: "{{ omit if ocp_installer.install_method == 'template' else item.iso | default('[' + vcenter.datastore + ']' + ocp_installer.clustername + '/' + ocp_installer.iso_datastore_name| default('ipxe_okd_ocp.iso')) }}"

    customvalues:

      # Values needed for Grub and Netinstall
      # Set Hostname
      - key:   guestinfo.ipxe.hostname
        value: "{{item.hostname}}"

      # Set ignition NameFile
      - key:   guestinfo.ipxe.ignition
        value: "{{item.hostname}}.ign"

      # Set iPXE IP
      - key:   guestinfo.ipxe.net0.ip
        value: "{{item.network.ip}}"

      # Set iPXE mask
      - key:   guestinfo.ipxe.net0.netmask
        value: "{{item.network.mask | default(hosts_defaults.network.mask)}}"
      
      # Set iPXE Gw
      - key:   guestinfo.ipxe.net0.gateway
        value: "{{item.network.gw | default(hosts_defaults.network.gw)}}"

      # Set iPXE fileserver
      - key:   guestinfo.ipxe.fileserver
        value: "http://{{ hostvars[ groups.webserver[0] ]['ansible_fqdn'] | default(hosts_defaults.webserver) |default('127.0.0.1')}}:8080"

      # Set DNS
      - key:   guestinfo.ipxe.dns
        value: "{{item.network.dns[0] | default(hosts_defaults.network.dns[0])}}"

      - key:   guestinfo.ipxe.dns1
        value: "{{item.network.dns[0] | default(hosts_defaults.network.dns[0])}}"

      - key:   guestinfo.ipxe.dns2
        value: "{{item.network.dns[1] | default(hosts_defaults.network.dns[1]) | default(hosts_defaults.network.dns[0])}}"

      - key:   guestinfo.ipxe.dns3
        value: "{{item.network.dns[2] | default(hosts_defaults.network.dns[2]) | default(hosts_defaults.network.dns[0])}}"

      - key:   guestinfo.ipxe.kernel-installer
        value: "{{item.kernelimg | default(hosts_defaults.kernelimg) | default('kernel')}}"

      - key:   guestinfo.ipxe.initrd-installer
        value: "{{item.initramfs | default(hosts_defaults.initramfs) | default('initramfs.img')}}"

      - key:   guestinfo.ipxe.coreos-image
        value: "{{item.coreos_image | default(hosts_defaults.coreos_image) | default('coreos_image.raw.gz') }}"
        

      - key:   guestinfo.ipxe.disk
        value: "{{item.disk | default(hosts_defaults.disk_device_name) | default('sda') }}"
        
      - key:   guestinfo.ipxe.net_interface
        value: "{{item.network.interface | default(hosts_defaults['network']['interface']) | default(os_interface)}}"
        
      - key:   guestinfo.ipxe.menu_default
        value: "{{item.install_method | default(ocp_installer.install_method)}}"
        
      - key:   guestinfo.ipxe.node_type
        value: "{{item.type}}"
        


      # # Values needed for Template or Grub mode
      - key:   "{{ 'guestinfo.ignition.config.data_disabled' if ocp_installer.install_method == 'netinstall' else 'guestinfo.ignition.config.data' }}" 
        value: "{{item.ignition | default(ign[item.hostname]) | default(ign[item.type])}}"

      - key:   "{{ 'guestinfo.ignition.config.data.encoding_disabled' if ocp_installer.install_method == 'netinstall' else 'guestinfo.ignition.config.data.encoding' }}" 
        value: base64

      # Values always needed  
      - key: disk.EnableUUID
        value: "TRUE"
      - key: sched.cpu.latencySensitivity
        value: "{{ 'high' if enable_reservation else 'normal' }}"
    
    networks:
      - name: "{{ item.network.name | default(hosts_defaults['network']['name']) }}"
        mac: "{{ item.network.mac | default(omit)}}"

  delegate_to: localhost
  register: deploy

- debug:
    msg: "{{deploy}}"

- name: When we need to use iPXE or grub we should boot from cdrom the first time
  tags: vm
  loop: "{{ vm_hosts }}"
  when: ocp_installer.install_method != 'netinstall'
  vmware_guest_boot_manager:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    name: "{{ item.vmname | default(item.hostname) }}"
    boot_delay: 2000
    enter_bios_setup: False
    boot_retry_enabled: True
    boot_retry_delay: 10000
    boot_firmware: bios
    boot_order: 
      - 'cdrom'
      - 'disk'
  delegate_to: localhost
  register: vm_boot_order

- name: Power on Machines

  tags: vm
  loop: "{{ vm_hosts }}"
  vmware_guest:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    name: "{{ item.vmname | default(item.hostname) }}"
    state: "{{ocp_vm_power_state}}"
    datacenter: "{{ vcenter.datacenter }}"
  delegate_to: localhost
  register: deploy  

- name: Now we can revert to disk as we should have correctly booted and written on disk
  tags: vm
  loop: "{{ vm_hosts }}"
  when: ocp_installer.install_method != 'netinstall'
  vmware_guest_boot_manager:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    name: "{{ item.vmname | default(item.hostname) }}"
    boot_delay: 2000
    enter_bios_setup: False
    boot_retry_enabled: True
    boot_retry_delay: 10000
    boot_firmware: bios
    boot_order: 
      - 'disk'
      - 'cdrom'
  delegate_to: localhost
  register: vm_boot_order