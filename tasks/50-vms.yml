---


- name: Install Ansible's vmware_guest required libraryes
  yum:
    name: 
      - python3-requests
      - python3-pip
    state: present

- name: Install python non rpm packages
  pip:
    name: 
      - PyVmomi

- name: Create Directory in Datastore to host iPXE
  vsphere_file:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    datacenter: "{{ vcenter.datacenter }}"
    datastore:  "{{ vcenter.datastore }}"      
    path: "{{ ocp_installer.clustername }}"
    state: directory
  delegate_to: localhost
  ignore_errors: yes

- name: "Query a ipxe iso file on a datastore {{ ocp_installer.clustername }}/{{ hosts_defaults.iso }}"
  vsphere_file:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    datacenter: "{{ vcenter.datacenter }}"
    datastore:  "{{ vcenter.datastore }}"      
    path: "{{ ocp_installer.clustername }}/{{ hosts_defaults.iso }}"
    state: file
  delegate_to: localhost
  ignore_errors: yes
  register: ipxe_inuse

- name: Copy file to datastore using delegate_to
  when: ipxe_inuse.state == 'absent'
  vsphere_copy:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    datacenter: "{{ vcenter.datacenter }}"
    datastore:  "{{ vcenter.datastore }}"
    src: "{{playbook_dir}}/tmp/iso/rhcos_ipxe.iso"
    path: "{{ ocp_installer.clustername }}/{{ hosts_defaults.iso }}"
  delegate_to: localhost

- name: "Create a VM folder ({{ vcenter.folder }}) on datacenter {{ vcenter.datacenter }}"
  vcenter_folder:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    datacenter: "{{ vcenter.datacenter }}"
    folder_name: "{{ vcenter.folder }}"
    folder_type: vm
    state: present
  register: vm_folder_creation_result
  delegate_to: localhost

- name: "Create a Datastore folder ({{ ocp_installer.clustername }}) on datacenter {{ vcenter.datacenter }}"
  vcenter_folder:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    datacenter: "{{ vcenter.datacenter }}"
    folder_name: "{{ ocp_installer.clustername }}"
    folder_type: datastore
    state: present
  register: vm_folder_creation_result
  delegate_to: localhost

- name: Create a virtual machine from a template
  tags: vm
  loop: "{{ vm_hosts }}"
  vmware_guest:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.user }}"
    password: "{{ vcenter.password }}"
    validate_certs: "{{ vcenter.validate_certs }}"
    folder: "{{ vcenter.folder }}"
    name: "{{ item.vmname | default(item.hostname) }}"
    state: poweredon
    datacenter: "{{ vcenter.datacenter }}"
    guest_id: "{{ item.guest_id | default(hosts_defaults[item.type]['guest_id']) }}"
    disk:
      - size_gb: "{{ item.disk | default(hosts_defaults[item.type]['disk']) }}"
        type: thin
        datastore:  "{{ vcenter.datastore }}"
    hardware:
      memory_mb: "{{ item.memory_mb | default(hosts_defaults[item.type]['memory_mb']) }}"
      num_cpus: "{{ item.num_cpus | default(hosts_defaults[item.type]['num_cpus']) }}"
      num_cpu_cores_per_socket: "{{ item.num_cpu_cores_per_socket | default(hosts_defaults[item.type]['num_cpu_cores_per_socket']) }}"
      mem_limit: "{{ item.mem_limit | default(hosts_defaults[item.type]['mem_limit']) }}"
      mem_reservation: "{{ item.mem_limit | default(hosts_defaults[item.type]['mem_limit']) }}"
      memory_reservation_lock: "{{ item.memory_reservation_lock | default(hosts_defaults[item.type]['memory_reservation_lock']) }}"
      cpu_reservation: "{{ vcenter.cpu_biggest * ( item.num_cpus | default(hosts_defaults[item.type]['num_cpus'])) * ( item.num_cpu_cores_per_socket | default(hosts_defaults[item.type]['num_cpu_cores_per_socket'])) }}"
    cdrom:
      type: iso
      iso_path: "{{ item.iso | default('[' + vcenter.datastore + ']' + vcenter.storage + '/' + hosts_defaults.iso) }}"
    customvalues:
      - key: guestinfo.ipxe.hostname
        value: "{{ item.hostname }}"
      - key: guestinfo.ipxe.ignition
        value: "{{ item.ignition | default(hosts_defaults[item.type]['ignition']) }}"
      - key: guestinfo.ipxe.net0.ip
        value: "{{ item.network.ip }}"
      - key: guestinfo.ipxe.net0.netmask
        value: "{{ item.network.mask |  default(hosts_defaults['network']['mask']) }}"
      - key: guestinfo.ipxe.net0.gateway
        value: "{{ item.network.gw |  default(hosts_defaults['network']['gw']) }}"
      - key: guestinfo.ipxe.fileserver
        value: "http://{{ hostvars['localhost']['ansible_fqdn'] }}:8080"
      - key: guestinfo.ipxe.dns1
        value: "{{ item.network.dns[0] |  default(hosts_defaults['network']['dns'][0]) }}"
      - key: guestinfo.ipxe.dns2
        value: "{{ item.network.dns[1] |  default(hosts_defaults['network']['dns'][1]) }}"
      - key: guestinfo.ipxe.dns3
        value: "{{ item.network.dns[2] |  default(hosts_defaults['network']['dns'][2]) }}"
      - key: guestinfo.ipxe.kernel-installer
        value: "kernel"
      - key: guestinfo.ipxe.initrd-installer
        value: "initramfs.img"
      - key: guestinfo.ipxe.rhcos-image
        value: "rhcos.raw.gz"
      - key: guestinfo.ipxe.disk
        value: "sda"
      - key: guestinfo.ipxe.net_interface
        value: "ens192"
      - key: disk.EnableUUID
        value: "TRUE"
      - key: annotation
        value: "{{ item.annotation | default('Openshift node ' + item.type) }}"
      - key: sched.cpu.latencySensitivity
        value: "{{ item.latencysensitivity |  default(hosts_defaults.latencysensitivity) }}"
      - key: vhv.enable
        value: "TRUE"
    networks:
    - name: "{{ item.network.name |  default(hosts_defaults['network']['name']) }}"
  delegate_to: localhost
  register: deploy